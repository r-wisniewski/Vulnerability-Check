import requests
from requests.sessions import Session
import json
import pandas as pd
import time
from tqdm import tqdm
from concurrent.futures import ThreadPoolExecutor
from threading import local,Lock

URL = "https://services.nvd.nist.gov/rest/json/cves/1.0/?cpeMatchString="
cpeMatchString = "cpe:2.3:a:*:"
append = ":*:*:*:*:*:*:*"

thread_local = local()
mutex = Lock()

def make_url_list(pkg_dict:dict) -> list:
    url_list = []
    for pkg in pkg_dict:
        prod = pkg
        ver = pkg_dict[pkg]
        cpeArg = URL+cpeMatchString+prod+":"+ver+append
        url_list.append(cpeArg)
    return url_list

def request_all(url_list:list) -> None:
    with ThreadPoolExecutor(max_workers=10) as executor:
        executor.map(request_url,url_list)

def get_session() -> Session:
    if not hasattr(thread_local,'session'):
        thread_local.session = requests.Session()
    return thread_local.session

def request_url(url:str) -> None:
    session = get_session()
    with session.get(url) as resp:
        json_data = json.loads(resp.text)
        bar.update(1)
        #If no CPE results were returned, then skip this pkg
        if json_data["totalResults"] == 0:
            pass
        else:
            vulnerabilities = json_data['result']['CVE_Items']
            #loop through matching vulnerabilities and appendix the vuln_dict to the overall rows_list that will be used
            #to build the pandas dataframe
            for vuln in vulnerabilities:
                vuln_dict = {}
                #add entries to the vuln_dict
                url1 = url.split(":")
                vuln_dict["Package"] = url1[5]
                vuln_dict["Version"] = url1[6]
                vuln_dict["CVE ID"] = vuln['cve']['CVE_data_meta']['ID']
                #Use CVSS 3.x Severity and Metrics where possible, use 2.0 if 3.x doesn't exist
                try:
                    vuln_dict["Severity"] = vuln['impact']['baseMetricV3']['cvssV3']['baseSeverity']
                    vuln_dict["Score"] = vuln['impact']['baseMetricV3']['cvssV3']['baseScore']
                except:
                    vuln_dict["Severity"] = vuln['impact']['baseMetricV2']['severity']
                    vuln_dict["Score"] = vuln['impact']['baseMetricV2']['cvssV2']['baseScore']
                vuln_dict["Description"] = vuln['cve']['description']['description_data'][0]['value']
                vuln_dict["CWE ID"] = vuln['cve']['problemtype']['problemtype_data'][0]['description'][0]['value']
                vuln_dict["National Vulnerability Database Link"] = "https://nvd.nist.gov/vuln/detail/"+vuln['cve']['CVE_data_meta']['ID']
                #append the vuln_dict to the list of rows
                mutex.acquire()
                rows_list.append(vuln_dict)
                mutex.release()

def nvd_check(pkg_dict:dict) -> pd.DataFrame:
    #get the list of all URLs to request
    url_list = make_url_list(pkg_dict)
    #setup the progress bar
    global bar 
    bar = tqdm(desc="Progress",total=len(pkg_dict))

    #set globals up
    global rows_list
    rows_list = []

    #Request all URLs
    request_all(url_list)

    #close the progress bar
    bar.close()

    #build the pandas dataframe
    vuln_dataframe = pd.DataFrame(rows_list, columns=["Package","Version", "CVE ID", "Severity", "Score", "Description", "CWE ID", "National Vulnerability Database Link"])
    #return pandas dataframe with vulnerabilities of this system   
            
    return vuln_dataframe